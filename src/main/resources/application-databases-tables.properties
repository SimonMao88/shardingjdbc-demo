
#分成两个库
sharding.jdbc.datasource.names=ds0,ds1

#数据源0的配置
sharding.jdbc.datasource.ds0.type=com.alibaba.druid.pool.DruidDataSource
sharding.jdbc.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver
sharding.jdbc.datasource.ds0.url=jdbc:mysql://localhost:3306/ds0?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
sharding.jdbc.datasource.ds0.username=root
sharding.jdbc.datasource.ds0.password=881129
sharding.jdbc.datasource.ds0.initial-size=8
sharding.jdbc.datasource.ds0.min-idle=5
sharding.jdbc.datasource.ds0.max-active=30
sharding.jdbc.datasource.ds0.query-timeout=6000
sharding.jdbc.datasource.ds0.transaction-query-timeout=6000
sharding.jdbc.datasource.ds0.remove-abandoned-timeout=1800
sharding.jdbc.datasource.ds0.filter-class-names=stat
sharding.jdbc.datasource.ds0.filters=stat,config
sharding.jdbc.datasource.ds0.testOnBorrow=false


#数据源1的配置
sharding.jdbc.datasource.ds1.type=com.alibaba.druid.pool.DruidDataSource
sharding.jdbc.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
sharding.jdbc.datasource.ds1.url=jdbc:mysql://localhost:3306/ds1?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
sharding.jdbc.datasource.ds1.username=root
sharding.jdbc.datasource.ds1.password=881129
sharding.jdbc.datasource.ds1.initial-size=8
sharding.jdbc.datasource.ds1.min-idle=5
sharding.jdbc.datasource.ds1.max-active=20
sharding.jdbc.datasource.ds1.query-timeout=6000
sharding.jdbc.datasource.ds1.transaction-query-timeout=6000
sharding.jdbc.datasource.ds1.remove-abandoned-timeout=1800
sharding.jdbc.datasource.ds1.filter-class-names=stat
sharding.jdbc.datasource.ds1.filters=stat,config
sharding.jdbc.datasource.ds1.testOnBorrow=false


#数据库的路由策略配置---根据user_id分
sharding.jdbc.config.sharding.default-database-strategy.inline.sharding-column=user_id
sharding.jdbc.config.sharding.default-database-strategy.inline.algorithm-expression=ds$->{user_id % 2}

#数据库表的路由策略配置---根据order_id来决策
sharding.jdbc.config.sharding.tables.t_order.actual-data-nodes=ds$->{0..1}.t_order$->{0..1}
sharding.jdbc.config.sharding.tables.t_order.table-strategy.inline.sharding-column=order_id
sharding.jdbc.config.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order$->{order_id % 2}
sharding.jdbc.config.sharding.tables.t_order.key-generator-column-name=order_id

sharding.jdbc.config.sharding.tables.t_order_item.actual-data-nodes=ds$->{0..1}.t_order_item$->{0..1}
sharding.jdbc.config.sharding.tables.t_order_item.table-strategy.inline.sharding-column=order_id
sharding.jdbc.config.sharding.tables.t_order_item.table-strategy.inline.algorithm-expression=t_order_item$->{order_id % 2}
sharding.jdbc.config.sharding.tables.t_order_item.key-generator-column-name=order_item_id

#sharding.jdbc.config.sharding.broadcast-tables=t_config



##如果有关联表没配置绑定有可能会出现笛卡尔积
sharding.jdbc.config.sharding.binding-tables[0]=t_order,t_order_item


# 打印执行的数据库以及语句
sharding.jdbc.config.props..sql.show=true
spring.main.allow-bean-definition-overriding=true

